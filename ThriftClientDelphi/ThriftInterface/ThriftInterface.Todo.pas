(**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *)

unit ThriftInterface.Todo;

interface

uses
  Classes,
  SysUtils,
  Generics.Collections,
  Thrift,
  Thrift.Utils,
  Thrift.Collections,
  Thrift.Protocol,
  Thrift.Transport,
  ThriftInterface.Common;

const
  cThriftInterface_Todo_Option_AnsiStr_Binary = False;
  cThriftInterface_Todo_Option_Register_Types = False;
  cThriftInterface_Todo_Option_ConstPrefix    = False;
  cThriftInterface_Todo_Option_Events         = False;
  cThriftInterface_Todo_Option_XmlDoc         = False;

type
  ITTodo = interface;

  TtodoId = string;

  ITTodo = interface(IBase)
    function GetId: TtodoId;
    procedure SetId( const Value: TtodoId);
    function GetChecked: Boolean;
    procedure SetChecked( const Value: Boolean);
    function GetDetail: string;
    procedure SetDetail( const Value: string);

    property Id: TtodoId read GetId write SetId;
    property Checked: Boolean read GetChecked write SetChecked;
    property Detail: string read GetDetail write SetDetail;

    function Get__isset_Id: Boolean;
    function Get__isset_Checked: Boolean;
    function Get__isset_Detail: Boolean;

    property __isset_Id: Boolean read Get__isset_Id;
    property __isset_Checked: Boolean read Get__isset_Checked;
    property __isset_Detail: Boolean read Get__isset_Detail;
  end;

  TTTodoImpl = class(TInterfacedObject, IBase, ITTodo)
  private
    FId: TtodoId;
    FChecked: Boolean;
    FDetail: string;
    
    F__isset_Id: Boolean;
    F__isset_Checked: Boolean;
    F__isset_Detail: Boolean;
    
    function GetId: TtodoId;
    procedure SetId( const Value: TtodoId);
    function GetChecked: Boolean;
    procedure SetChecked( const Value: Boolean);
    function GetDetail: string;
    procedure SetDetail( const Value: string);

    function Get__isset_Id: Boolean;
    function Get__isset_Checked: Boolean;
    function Get__isset_Detail: Boolean;
  public
    constructor Create;
    destructor Destroy; override;

    function ToString: string; override;

    // IBase
    procedure Read( const iprot: IProtocol);
    procedure Write( const oprot: IProtocol);

    // Properties
    property Id: TtodoId read GetId write SetId;
    property Checked: Boolean read GetChecked write SetChecked;
    property Detail: string read GetDetail write SetDetail;

    // isset
    property __isset_Id: Boolean read Get__isset_Id;
    property __isset_Checked: Boolean read Get__isset_Checked;
    property __isset_Detail: Boolean read Get__isset_Detail;
  end;

  TTodoService = class
  public
    type
      Iface = interface
        function getTodoList(): IThriftList<ITTodo>;
        function post(const detail: string): string;
        procedure toggle(const id: TtodoId);
        procedure remove(const id: TtodoId);
      end;

      TClient = class( TInterfacedObject, Iface)
      public
        constructor Create( prot: IProtocol); overload;
        constructor Create( const iprot: IProtocol; const oprot: IProtocol); overload;
      protected
        iprot_: IProtocol;
        oprot_: IProtocol;
        seqid_: Integer;
      public
        property InputProtocol: IProtocol read iprot_;
        property OutputProtocol: IProtocol read oprot_;
      protected
        // Iface
        function getTodoList(): IThriftList<ITTodo>;
        function post(const detail: string): string;
        procedure toggle(const id: TtodoId);
        procedure remove(const id: TtodoId);
      public
        procedure send_getTodoList();
        function recv_getTodoList(): IThriftList<ITTodo>;
        procedure send_post(const detail: string);
        function recv_post(): string;
        procedure send_toggle(const id: TtodoId);
        procedure recv_toggle();
        procedure send_remove(const id: TtodoId);
        procedure recv_remove();
      end;

      TProcessorImpl = class( TInterfacedObject, IProcessor)
      public
        constructor Create( iface_: Iface );
        destructor Destroy; override;
      private
        iface_: Iface;
      protected
        type
          TProcessFunction = reference to procedure( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
      protected
        processMap_: IThriftDictionary<string, TProcessFunction>;
      public
        function Process( const iprot: IProtocol; const oprot: IProtocol; const events : IProcessorEvents): Boolean;
        procedure getTodoList_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
        procedure post_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
        procedure toggle_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
        procedure remove_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
      end;

      IGetTodoList_args = interface(IBase)
      end;

      TGetTodoList_argsImpl = class(TInterfacedObject, IBase, IGetTodoList_args)
      private
        
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);
      end;

      IGetTodoList_result = interface(IBase)
        function GetSuccess: IThriftList<ITTodo>;
        procedure SetSuccess( const Value: IThriftList<ITTodo>);

        property Success: IThriftList<ITTodo> read GetSuccess write SetSuccess;

        function Get__isset_Success: Boolean;

        property __isset_Success: Boolean read Get__isset_Success;
      end;

      TGetTodoList_resultImpl = class(TInterfacedObject, IBase, IGetTodoList_result)
      private
        FSuccess: IThriftList<ITTodo>;
        
        F__isset_Success: Boolean;
        
        function GetSuccess: IThriftList<ITTodo>;
        procedure SetSuccess( const Value: IThriftList<ITTodo>);

        function Get__isset_Success: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Success: IThriftList<ITTodo> read GetSuccess write SetSuccess;

        // isset
        property __isset_Success: Boolean read Get__isset_Success;
      end;

      IPost_args = interface(IBase)
        function GetDetail: string;
        procedure SetDetail( const Value: string);

        property Detail: string read GetDetail write SetDetail;

        function Get__isset_Detail: Boolean;

        property __isset_Detail: Boolean read Get__isset_Detail;
      end;

      TPost_argsImpl = class(TInterfacedObject, IBase, IPost_args)
      private
        FDetail: string;
        
        F__isset_Detail: Boolean;
        
        function GetDetail: string;
        procedure SetDetail( const Value: string);

        function Get__isset_Detail: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Detail: string read GetDetail write SetDetail;

        // isset
        property __isset_Detail: Boolean read Get__isset_Detail;
      end;

      IPost_result = interface(IBase)
        function GetSuccess: string;
        procedure SetSuccess( const Value: string);

        property Success: string read GetSuccess write SetSuccess;

        function Get__isset_Success: Boolean;

        property __isset_Success: Boolean read Get__isset_Success;
      end;

      TPost_resultImpl = class(TInterfacedObject, IBase, IPost_result)
      private
        FSuccess: string;
        
        F__isset_Success: Boolean;
        
        function GetSuccess: string;
        procedure SetSuccess( const Value: string);

        function Get__isset_Success: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Success: string read GetSuccess write SetSuccess;

        // isset
        property __isset_Success: Boolean read Get__isset_Success;
      end;

      IToggle_args = interface(IBase)
        function GetId: TtodoId;
        procedure SetId( const Value: TtodoId);

        property Id: TtodoId read GetId write SetId;

        function Get__isset_Id: Boolean;

        property __isset_Id: Boolean read Get__isset_Id;
      end;

      TToggle_argsImpl = class(TInterfacedObject, IBase, IToggle_args)
      private
        FId: TtodoId;
        
        F__isset_Id: Boolean;
        
        function GetId: TtodoId;
        procedure SetId( const Value: TtodoId);

        function Get__isset_Id: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Id: TtodoId read GetId write SetId;

        // isset
        property __isset_Id: Boolean read Get__isset_Id;
      end;

      IToggle_result = interface(IBase)
        function GetError: TTInvalidParameterException.ITInvalidParameterExceptionFactory;
        procedure SetError( const Value: TTInvalidParameterException.ITInvalidParameterExceptionFactory);

        property Error: TTInvalidParameterException.ITInvalidParameterExceptionFactory read GetError write SetError;

        function Get__isset_Error: Boolean;

        property __isset_Error: Boolean read Get__isset_Error;
      end;

      TToggle_resultImpl = class(TInterfacedObject, IBase, IToggle_result)
      private
        FError: TTInvalidParameterException.ITInvalidParameterExceptionFactory;
        
        F__isset_Error: Boolean;
        
        function GetError: TTInvalidParameterException.ITInvalidParameterExceptionFactory;
        procedure SetError( const Value: TTInvalidParameterException.ITInvalidParameterExceptionFactory);

        function Get__isset_Error: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Error: TTInvalidParameterException.ITInvalidParameterExceptionFactory read GetError write SetError;

        // isset
        property __isset_Error: Boolean read Get__isset_Error;
      end;

      IRemove_args = interface(IBase)
        function GetId: TtodoId;
        procedure SetId( const Value: TtodoId);

        property Id: TtodoId read GetId write SetId;

        function Get__isset_Id: Boolean;

        property __isset_Id: Boolean read Get__isset_Id;
      end;

      TRemove_argsImpl = class(TInterfacedObject, IBase, IRemove_args)
      private
        FId: TtodoId;
        
        F__isset_Id: Boolean;
        
        function GetId: TtodoId;
        procedure SetId( const Value: TtodoId);

        function Get__isset_Id: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Id: TtodoId read GetId write SetId;

        // isset
        property __isset_Id: Boolean read Get__isset_Id;
      end;

      IRemove_result = interface(IBase)
        function GetError: TTInvalidParameterException.ITInvalidParameterExceptionFactory;
        procedure SetError( const Value: TTInvalidParameterException.ITInvalidParameterExceptionFactory);

        property Error: TTInvalidParameterException.ITInvalidParameterExceptionFactory read GetError write SetError;

        function Get__isset_Error: Boolean;

        property __isset_Error: Boolean read Get__isset_Error;
      end;

      TRemove_resultImpl = class(TInterfacedObject, IBase, IRemove_result)
      private
        FError: TTInvalidParameterException.ITInvalidParameterExceptionFactory;
        
        F__isset_Error: Boolean;
        
        function GetError: TTInvalidParameterException.ITInvalidParameterExceptionFactory;
        procedure SetError( const Value: TTInvalidParameterException.ITInvalidParameterExceptionFactory);

        function Get__isset_Error: Boolean;
      public
        constructor Create;
        destructor Destroy; override;

        function ToString: string; override;

        // IBase
        procedure Read( const iprot: IProtocol);
        procedure Write( const oprot: IProtocol);

        // Properties
        property Error: TTInvalidParameterException.ITInvalidParameterExceptionFactory read GetError write SetError;

        // isset
        property __isset_Error: Boolean read Get__isset_Error;
      end;

  end;
  
implementation

constructor TTTodoImpl.Create;
begin
  inherited;
end;

destructor TTTodoImpl.Destroy;
begin
  inherited;
end;

function TTTodoImpl.GetId: TtodoId;
begin
  Result := FId;
end;

procedure TTTodoImpl.SetId( const Value: TtodoId);
begin
  F__isset_Id := True;
  FId := Value;
end;

function TTTodoImpl.Get__isset_Id: Boolean;
begin
  Result := F__isset_Id;
end;

function TTTodoImpl.GetChecked: Boolean;
begin
  Result := FChecked;
end;

procedure TTTodoImpl.SetChecked( const Value: Boolean);
begin
  F__isset_Checked := True;
  FChecked := Value;
end;

function TTTodoImpl.Get__isset_Checked: Boolean;
begin
  Result := F__isset_Checked;
end;

function TTTodoImpl.GetDetail: string;
begin
  Result := FDetail;
end;

procedure TTTodoImpl.SetDetail( const Value: string);
begin
  F__isset_Detail := True;
  FDetail := Value;
end;

function TTTodoImpl.Get__isset_Detail: Boolean;
begin
  Result := F__isset_Detail;
end;

procedure TTTodoImpl.Read( const iprot: IProtocol);
var
  field_ : TThriftField;
  struc : TThriftStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then begin
            Self.Id := iprot.ReadString();
          end else begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        2: begin
          if (field_.Type_ = TType.Bool_) then begin
            Self.Checked := iprot.ReadBool();
          end else begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end;
        3: begin
          if (field_.Type_ = TType.String_) then begin
            Self.Detail := iprot.ReadString();
          end else begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTTodoImpl.Write( const oprot: IProtocol);
var
  struc : TThriftStruct;
  field_ : TThriftField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  Thrift.Protocol.Init( struc, 'TTodo');
  oprot.WriteStructBegin(struc);
  Thrift.Protocol.Init( field_);
  if (__isset_Id) then begin
    field_.Name := 'id';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Self.Id);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Checked) then begin
    field_.Name := 'checked';
    field_.Type_  := TType.Bool_;
    field_.ID := 2;
    oprot.WriteFieldBegin(field_);
    oprot.WriteBool(Self.Checked);
    oprot.WriteFieldEnd();
  end;
  if (__isset_Detail) then begin
    field_.Name := 'detail';
    field_.Type_  := TType.String_;
    field_.ID := 3;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Self.Detail);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTTodoImpl.ToString: string;
var
  _sb0 : TThriftStringBuilder;
  _first1 : Boolean;
begin
  _sb0 := TThriftStringBuilder.Create('(');
  try
    _first1 := TRUE;
    if (__isset_Id) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('Id: ');
      _sb0.Append( Self.Id);
    end;
    if (__isset_Checked) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('Checked: ');
      _sb0.Append( Self.Checked);
    end;
    if (__isset_Detail) then begin
      if not _first1 then _sb0.Append(',');
      _first1 := FALSE;
      _sb0.Append('Detail: ');
      _sb0.Append( Self.Detail);
    end;
    _sb0.Append(')');
    Result := _sb0.ToString;
    if _first1 then {prevent warning};
  finally
    _sb0.Free;
  end;
end;

constructor TTodoService.TClient.Create( prot: IProtocol);
begin
  Create( prot, prot );
end;

constructor TTodoService.TClient.Create( const iprot: IProtocol; const oprot: IProtocol);
begin
  inherited Create;
  iprot_ := iprot;
  oprot_ := oprot;
end;

function TTodoService.TClient.getTodoList(): IThriftList<ITTodo>;
begin
  send_getTodoList();
  Result := recv_getTodoList();
end;

procedure TTodoService.TClient.send_getTodoList();
var
  _args2 : IGetTodoList_args;
  _msg3 : Thrift.Protocol.TThriftMessage;
begin
  seqid_ := seqid_ + 1;
  Thrift.Protocol.Init( _msg3, 'getTodoList', TMessageType.Call, seqid_);
  oprot_.WriteMessageBegin( _msg3 );
  _args2 := TGetTodoList_argsImpl.Create();
  _args2.Write(oprot_);
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

function TTodoService.TClient.recv_getTodoList(): IThriftList<ITTodo>;
var
  _msg3 : Thrift.Protocol.TThriftMessage;
  _ax5 : TApplicationException;
  _ret6 : IGetTodoList_result;
begin
  _msg3 := iprot_.ReadMessageBegin();
  if (_msg3.Type_ = TMessageType.Exception) then
  begin
    _ax5 := TApplicationException.Read(iprot_);
    iprot_.ReadMessageEnd();
    raise _ax5;
  end;
  _ret6 := TGetTodoList_resultImpl.Create();
  _ret6.Read(iprot_);
  iprot_.ReadMessageEnd();
  if (_ret6.__isset_success) then
  begin
    Result := _ret6.Success;
    _ret6.Success := nil;
    Exit;
  end;
  raise TApplicationExceptionMissingResult.Create('getTodoList failed: unknown result');
end;

function TTodoService.TClient.post(const detail: string): string;
begin
  send_post(detail);
  Result := recv_post();
end;

procedure TTodoService.TClient.send_post(const detail: string);
var
  _args7 : IPost_args;
  _msg8 : Thrift.Protocol.TThriftMessage;
begin
  seqid_ := seqid_ + 1;
  Thrift.Protocol.Init( _msg8, 'post', TMessageType.Call, seqid_);
  oprot_.WriteMessageBegin( _msg8 );
  _args7 := TPost_argsImpl.Create();
  _args7.Detail := detail;
  _args7.Write(oprot_);
  _args7.Detail := '';
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

function TTodoService.TClient.recv_post(): string;
var
  _msg8 : Thrift.Protocol.TThriftMessage;
  _ax10 : TApplicationException;
  _ret11 : IPost_result;
begin
  _msg8 := iprot_.ReadMessageBegin();
  if (_msg8.Type_ = TMessageType.Exception) then
  begin
    _ax10 := TApplicationException.Read(iprot_);
    iprot_.ReadMessageEnd();
    raise _ax10;
  end;
  _ret11 := TPost_resultImpl.Create();
  _ret11.Read(iprot_);
  iprot_.ReadMessageEnd();
  if (_ret11.__isset_success) then
  begin
    Result := _ret11.Success;
    Exit;
  end;
  raise TApplicationExceptionMissingResult.Create('post failed: unknown result');
end;

procedure TTodoService.TClient.toggle(const id: TtodoId);
begin
  send_toggle(id);
  recv_toggle();
end;

procedure TTodoService.TClient.send_toggle(const id: TtodoId);
var
  _args12 : IToggle_args;
  _msg13 : Thrift.Protocol.TThriftMessage;
begin
  seqid_ := seqid_ + 1;
  Thrift.Protocol.Init( _msg13, 'toggle', TMessageType.Call, seqid_);
  oprot_.WriteMessageBegin( _msg13 );
  _args12 := TToggle_argsImpl.Create();
  _args12.Id := id;
  _args12.Write(oprot_);
  _args12.Id := '';
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

procedure TTodoService.TClient.recv_toggle();
var
  _msg13 : Thrift.Protocol.TThriftMessage;
  _ex14 : Exception;
  _ax15 : TApplicationException;
  _ret16 : IToggle_result;
begin
  _msg13 := iprot_.ReadMessageBegin();
  if (_msg13.Type_ = TMessageType.Exception) then
  begin
    _ax15 := TApplicationException.Read(iprot_);
    iprot_.ReadMessageEnd();
    raise _ax15;
  end;
  _ret16 := TToggle_resultImpl.Create();
  _ret16.Read(iprot_);
  iprot_.ReadMessageEnd();
  if (_ret16.__isset_Error) then
  begin
    _ex14 := _ret16.Error.CreateException;
    raise _ex14;
  end;
end;

procedure TTodoService.TClient.remove(const id: TtodoId);
begin
  send_remove(id);
  recv_remove();
end;

procedure TTodoService.TClient.send_remove(const id: TtodoId);
var
  _args17 : IRemove_args;
  _msg18 : Thrift.Protocol.TThriftMessage;
begin
  seqid_ := seqid_ + 1;
  Thrift.Protocol.Init( _msg18, 'remove', TMessageType.Call, seqid_);
  oprot_.WriteMessageBegin( _msg18 );
  _args17 := TRemove_argsImpl.Create();
  _args17.Id := id;
  _args17.Write(oprot_);
  _args17.Id := '';
  oprot_.WriteMessageEnd();
  oprot_.Transport.Flush();
end;

procedure TTodoService.TClient.recv_remove();
var
  _msg18 : Thrift.Protocol.TThriftMessage;
  _ex19 : Exception;
  _ax20 : TApplicationException;
  _ret21 : IRemove_result;
begin
  _msg18 := iprot_.ReadMessageBegin();
  if (_msg18.Type_ = TMessageType.Exception) then
  begin
    _ax20 := TApplicationException.Read(iprot_);
    iprot_.ReadMessageEnd();
    raise _ax20;
  end;
  _ret21 := TRemove_resultImpl.Create();
  _ret21.Read(iprot_);
  iprot_.ReadMessageEnd();
  if (_ret21.__isset_Error) then
  begin
    _ex19 := _ret21.Error.CreateException;
    raise _ex19;
  end;
end;

constructor TTodoService.TProcessorImpl.Create( iface_: Iface );
begin
  inherited Create;
  Self.iface_ := iface_;
  processMap_ := TThriftDictionaryImpl<string, TProcessFunction>.Create;
  processMap_.AddOrSetValue( 'getTodoList', getTodoList_Process);
  processMap_.AddOrSetValue( 'post', post_Process);
  processMap_.AddOrSetValue( 'toggle', toggle_Process);
  processMap_.AddOrSetValue( 'remove', remove_Process);
end;

destructor TTodoService.TProcessorImpl.Destroy;
begin
  inherited;
end;

function TTodoService.TProcessorImpl.Process( const iprot: IProtocol; const oprot: IProtocol; const events : IProcessorEvents): Boolean;
var
  msg : Thrift.Protocol.TThriftMessage;
  fn : TProcessFunction;
  x : TApplicationException;
begin
  try
    msg := iprot.ReadMessageBegin();
    fn := nil;
    if not processMap_.TryGetValue(msg.Name, fn)
    or not Assigned(fn) then
    begin
      TProtocolUtil.Skip(iprot, TType.Struct);
      iprot.ReadMessageEnd();
      x := TApplicationExceptionUnknownMethod.Create('Invalid method name: ''' + msg.Name + '''');
      Thrift.Protocol.Init( msg, msg.Name, TMessageType.Exception, msg.SeqID);
      oprot.WriteMessageBegin( msg);
      x.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
      Result := True;
      Exit;
    end;
    fn(msg.SeqID, iprot, oprot);
  except
    on TTransportExceptionTimedOut do begin
      Result := True;
      Exit;
    end;
    else begin
      Result := False;
      Exit;
    end;
  end;
  Result := True;
end;

// both way processor
procedure TTodoService.TProcessorImpl.getTodoList_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: IGetTodoList_args;
  msg: Thrift.Protocol.TThriftMessage;
  ret: IGetTodoList_result;
  appx : TApplicationException;
begin
  args := TGetTodoList_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  ret := TGetTodoList_resultImpl.Create;
  try
    ret.Success := iface_.getTodoList();
  except
    on E: Exception do begin
      appx := TApplicationExceptionInternalError.Create(E.Message);
      try
        Thrift.Protocol.Init( msg, 'getTodoList', TMessageType.Exception, seqid);
        oprot.WriteMessageBegin( msg);
        appx.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
        Exit;
      finally
        appx.Free;
      end;
    end;
  end;
  Thrift.Protocol.Init( msg, 'getTodoList', TMessageType.Reply, seqid); 
  oprot.WriteMessageBegin( msg); 
  ret.Write(oprot);
  oprot.WriteMessageEnd();
  oprot.Transport.Flush();
end;

// both way processor
procedure TTodoService.TProcessorImpl.post_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: IPost_args;
  msg: Thrift.Protocol.TThriftMessage;
  ret: IPost_result;
  appx : TApplicationException;
begin
  args := TPost_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  ret := TPost_resultImpl.Create;
  try
    ret.Success := iface_.post(args.Detail);
    args.Detail := '';
  except
    on E: Exception do begin
      appx := TApplicationExceptionInternalError.Create(E.Message);
      try
        Thrift.Protocol.Init( msg, 'post', TMessageType.Exception, seqid);
        oprot.WriteMessageBegin( msg);
        appx.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
        Exit;
      finally
        appx.Free;
      end;
    end;
  end;
  Thrift.Protocol.Init( msg, 'post', TMessageType.Reply, seqid); 
  oprot.WriteMessageBegin( msg); 
  ret.Write(oprot);
  oprot.WriteMessageEnd();
  oprot.Transport.Flush();
end;

// both way processor
procedure TTodoService.TProcessorImpl.toggle_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: IToggle_args;
  msg: Thrift.Protocol.TThriftMessage;
  ret: IToggle_result;
  appx : TApplicationException;
begin
  args := TToggle_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  ret := TToggle_resultImpl.Create;
  try
    iface_.toggle(args.Id);
    args.Id := '';
  except
    on E: TTInvalidParameterException do begin
      ret.Error := E.TInvalidParameterExceptionFactory;
    end;
    on E: Exception do begin
      appx := TApplicationExceptionInternalError.Create(E.Message);
      try
        Thrift.Protocol.Init( msg, 'toggle', TMessageType.Exception, seqid);
        oprot.WriteMessageBegin( msg);
        appx.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
        Exit;
      finally
        appx.Free;
      end;
    end;
  end;
  Thrift.Protocol.Init( msg, 'toggle', TMessageType.Reply, seqid); 
  oprot.WriteMessageBegin( msg); 
  ret.Write(oprot);
  oprot.WriteMessageEnd();
  oprot.Transport.Flush();
end;

// both way processor
procedure TTodoService.TProcessorImpl.remove_Process( seqid: Integer; const iprot: IProtocol; const oprot: IProtocol);
var
  args: IRemove_args;
  msg: Thrift.Protocol.TThriftMessage;
  ret: IRemove_result;
  appx : TApplicationException;
begin
  args := TRemove_argsImpl.Create;
  args.Read(iprot);
  iprot.ReadMessageEnd();
  ret := TRemove_resultImpl.Create;
  try
    iface_.remove(args.Id);
    args.Id := '';
  except
    on E: TTInvalidParameterException do begin
      ret.Error := E.TInvalidParameterExceptionFactory;
    end;
    on E: Exception do begin
      appx := TApplicationExceptionInternalError.Create(E.Message);
      try
        Thrift.Protocol.Init( msg, 'remove', TMessageType.Exception, seqid);
        oprot.WriteMessageBegin( msg);
        appx.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
        Exit;
      finally
        appx.Free;
      end;
    end;
  end;
  Thrift.Protocol.Init( msg, 'remove', TMessageType.Reply, seqid); 
  oprot.WriteMessageBegin( msg); 
  ret.Write(oprot);
  oprot.WriteMessageEnd();
  oprot.Transport.Flush();
end;

constructor TTodoService.TGetTodoList_argsImpl.Create;
begin
  inherited;
end;

destructor TTodoService.TGetTodoList_argsImpl.Destroy;
begin
  inherited;
end;

procedure TTodoService.TGetTodoList_argsImpl.Read( const iprot: IProtocol);
var
  field_ : TThriftField;
  struc : TThriftStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      TProtocolUtil.Skip(iprot, field_.Type_);
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTodoService.TGetTodoList_argsImpl.Write( const oprot: IProtocol);
var
  struc : TThriftStruct;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  Thrift.Protocol.Init( struc, 'getTodoList_args');
  oprot.WriteStructBegin(struc);
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTodoService.TGetTodoList_argsImpl.ToString: string;
var
  _sb22 : TThriftStringBuilder;
begin
  _sb22 := TThriftStringBuilder.Create('(');
  try
    _sb22.Append(')');
    Result := _sb22.ToString;
  finally
    _sb22.Free;
  end;
end;

constructor TTodoService.TGetTodoList_resultImpl.Create;
begin
  inherited;
end;

destructor TTodoService.TGetTodoList_resultImpl.Destroy;
begin
  inherited;
end;

function TTodoService.TGetTodoList_resultImpl.GetSuccess: IThriftList<ITTodo>;
begin
  Result := FSuccess;
end;

procedure TTodoService.TGetTodoList_resultImpl.SetSuccess( const Value: IThriftList<ITTodo>);
begin
  F__isset_Success := True;
  FSuccess := Value;
end;

function TTodoService.TGetTodoList_resultImpl.Get__isset_Success: Boolean;
begin
  Result := F__isset_Success;
end;

procedure TTodoService.TGetTodoList_resultImpl.Read( const iprot: IProtocol);
var
  field_ : TThriftField;
  struc : TThriftStruct;
  tracker : IProtocolRecursionTracker;
  _list24: TThriftList;
  _i25: Integer;
  _elem26: ITTodo;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        0: begin
          if (field_.Type_ = TType.List) then begin
            Self.Success := TThriftListImpl<ITTodo>.Create;
            _list24 := iprot.ReadListBegin();
            for _i25 := 0 to _list24.Count - 1 do
            begin
              _elem26 := TTTodoImpl.Create;
              _elem26.Read(iprot);
              Self.Success.Add(_elem26);
            end;
            iprot.ReadListEnd();
          end else begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTodoService.TGetTodoList_resultImpl.Write( const oprot: IProtocol);
var
  struc : TThriftStruct;
  field_ : TThriftField;
  tracker : IProtocolRecursionTracker;
  list_27 : TThriftList;
  _iter28: ITTodo;
begin
  tracker := oprot.NextRecursionLevel;
  Thrift.Protocol.Init( struc, 'getTodoList_result');
  oprot.WriteStructBegin(struc);
  Thrift.Protocol.Init( field_);
  if (Self.Success <> nil) and __isset_Success then begin
    field_.Name := 'Success';
    field_.Type_  := TType.List;
    field_.ID := 0;
    oprot.WriteFieldBegin(field_);
    Thrift.Protocol.Init( list_27, TType.Struct, Self.Success.Count);
    oprot.WriteListBegin( list_27);
    for _iter28 in Self.Success do
    begin
      _iter28.Write(oprot);
    end;
    oprot.WriteListEnd();
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTodoService.TGetTodoList_resultImpl.ToString: string;
var
  _sb29 : TThriftStringBuilder;
  _first30 : Boolean;
begin
  _sb29 := TThriftStringBuilder.Create('(');
  try
    _first30 := TRUE;
    if (Self.Success <> nil) and __isset_Success then begin
      if not _first30 then _sb29.Append(',');
      _first30 := FALSE;
      _sb29.Append('Success: ');
      _sb29.Append( Self.Success);
    end;
    _sb29.Append(')');
    Result := _sb29.ToString;
    if _first30 then {prevent warning};
  finally
    _sb29.Free;
  end;
end;

constructor TTodoService.TPost_argsImpl.Create;
begin
  inherited;
end;

destructor TTodoService.TPost_argsImpl.Destroy;
begin
  inherited;
end;

function TTodoService.TPost_argsImpl.GetDetail: string;
begin
  Result := FDetail;
end;

procedure TTodoService.TPost_argsImpl.SetDetail( const Value: string);
begin
  F__isset_Detail := True;
  FDetail := Value;
end;

function TTodoService.TPost_argsImpl.Get__isset_Detail: Boolean;
begin
  Result := F__isset_Detail;
end;

procedure TTodoService.TPost_argsImpl.Read( const iprot: IProtocol);
var
  field_ : TThriftField;
  struc : TThriftStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then begin
            Self.Detail := iprot.ReadString();
          end else begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTodoService.TPost_argsImpl.Write( const oprot: IProtocol);
var
  struc : TThriftStruct;
  field_ : TThriftField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  Thrift.Protocol.Init( struc, 'post_args');
  oprot.WriteStructBegin(struc);
  Thrift.Protocol.Init( field_);
  if (__isset_Detail) then begin
    field_.Name := 'detail';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Self.Detail);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTodoService.TPost_argsImpl.ToString: string;
var
  _sb31 : TThriftStringBuilder;
  _first32 : Boolean;
begin
  _sb31 := TThriftStringBuilder.Create('(');
  try
    _first32 := TRUE;
    if (__isset_Detail) then begin
      if not _first32 then _sb31.Append(',');
      _first32 := FALSE;
      _sb31.Append('Detail: ');
      _sb31.Append( Self.Detail);
    end;
    _sb31.Append(')');
    Result := _sb31.ToString;
    if _first32 then {prevent warning};
  finally
    _sb31.Free;
  end;
end;

constructor TTodoService.TPost_resultImpl.Create;
begin
  inherited;
end;

destructor TTodoService.TPost_resultImpl.Destroy;
begin
  inherited;
end;

function TTodoService.TPost_resultImpl.GetSuccess: string;
begin
  Result := FSuccess;
end;

procedure TTodoService.TPost_resultImpl.SetSuccess( const Value: string);
begin
  F__isset_Success := True;
  FSuccess := Value;
end;

function TTodoService.TPost_resultImpl.Get__isset_Success: Boolean;
begin
  Result := F__isset_Success;
end;

procedure TTodoService.TPost_resultImpl.Read( const iprot: IProtocol);
var
  field_ : TThriftField;
  struc : TThriftStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        0: begin
          if (field_.Type_ = TType.String_) then begin
            Self.Success := iprot.ReadString();
          end else begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTodoService.TPost_resultImpl.Write( const oprot: IProtocol);
var
  struc : TThriftStruct;
  field_ : TThriftField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  Thrift.Protocol.Init( struc, 'post_result');
  oprot.WriteStructBegin(struc);
  Thrift.Protocol.Init( field_);
  if (__isset_Success) then begin
    field_.Name := 'Success';
    field_.Type_  := TType.String_;
    field_.ID := 0;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Self.Success);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTodoService.TPost_resultImpl.ToString: string;
var
  _sb33 : TThriftStringBuilder;
  _first34 : Boolean;
begin
  _sb33 := TThriftStringBuilder.Create('(');
  try
    _first34 := TRUE;
    if (__isset_Success) then begin
      if not _first34 then _sb33.Append(',');
      _first34 := FALSE;
      _sb33.Append('Success: ');
      _sb33.Append( Self.Success);
    end;
    _sb33.Append(')');
    Result := _sb33.ToString;
    if _first34 then {prevent warning};
  finally
    _sb33.Free;
  end;
end;

constructor TTodoService.TToggle_argsImpl.Create;
begin
  inherited;
end;

destructor TTodoService.TToggle_argsImpl.Destroy;
begin
  inherited;
end;

function TTodoService.TToggle_argsImpl.GetId: TtodoId;
begin
  Result := FId;
end;

procedure TTodoService.TToggle_argsImpl.SetId( const Value: TtodoId);
begin
  F__isset_Id := True;
  FId := Value;
end;

function TTodoService.TToggle_argsImpl.Get__isset_Id: Boolean;
begin
  Result := F__isset_Id;
end;

procedure TTodoService.TToggle_argsImpl.Read( const iprot: IProtocol);
var
  field_ : TThriftField;
  struc : TThriftStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then begin
            Self.Id := iprot.ReadString();
          end else begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTodoService.TToggle_argsImpl.Write( const oprot: IProtocol);
var
  struc : TThriftStruct;
  field_ : TThriftField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  Thrift.Protocol.Init( struc, 'toggle_args');
  oprot.WriteStructBegin(struc);
  Thrift.Protocol.Init( field_);
  if (__isset_Id) then begin
    field_.Name := 'id';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Self.Id);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTodoService.TToggle_argsImpl.ToString: string;
var
  _sb35 : TThriftStringBuilder;
  _first36 : Boolean;
begin
  _sb35 := TThriftStringBuilder.Create('(');
  try
    _first36 := TRUE;
    if (__isset_Id) then begin
      if not _first36 then _sb35.Append(',');
      _first36 := FALSE;
      _sb35.Append('Id: ');
      _sb35.Append( Self.Id);
    end;
    _sb35.Append(')');
    Result := _sb35.ToString;
    if _first36 then {prevent warning};
  finally
    _sb35.Free;
  end;
end;

constructor TTodoService.TToggle_resultImpl.Create;
begin
  inherited;
end;

destructor TTodoService.TToggle_resultImpl.Destroy;
begin
  inherited;
end;

function TTodoService.TToggle_resultImpl.GetError: TTInvalidParameterException.ITInvalidParameterExceptionFactory;
begin
  Result := FError;
end;

procedure TTodoService.TToggle_resultImpl.SetError( const Value: TTInvalidParameterException.ITInvalidParameterExceptionFactory);
begin
  F__isset_Error := True;
  FError := Value;
end;

function TTodoService.TToggle_resultImpl.Get__isset_Error: Boolean;
begin
  Result := F__isset_Error;
end;

procedure TTodoService.TToggle_resultImpl.Read( const iprot: IProtocol);
var
  field_ : TThriftField;
  struc : TThriftStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.Struct) then begin
            Self.Error := TTInvalidParameterException.TTInvalidParameterExceptionFactoryImpl.Create;
            Self.Error.Read(iprot);
          end else begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTodoService.TToggle_resultImpl.Write( const oprot: IProtocol);
var
  struc : TThriftStruct;
  field_ : TThriftField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  Thrift.Protocol.Init( struc, 'toggle_result');
  oprot.WriteStructBegin(struc);
  Thrift.Protocol.Init( field_);
  if (Self.Error <> nil) and __isset_Error then begin
    field_.Name := 'error';
    field_.Type_  := TType.Struct;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    Self.Error.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTodoService.TToggle_resultImpl.ToString: string;
var
  _sb37 : TThriftStringBuilder;
  _first38 : Boolean;
begin
  _sb37 := TThriftStringBuilder.Create('(');
  try
    _first38 := TRUE;
    if (Self.Error <> nil) and __isset_Error then begin
      if not _first38 then _sb37.Append(',');
      _first38 := FALSE;
      _sb37.Append('Error: ');
      if (Self.Error = nil) then _sb37.Append('<null>') else _sb37.Append( Self.Error.ToString());
    end;
    _sb37.Append(')');
    Result := _sb37.ToString;
    if _first38 then {prevent warning};
  finally
    _sb37.Free;
  end;
end;

constructor TTodoService.TRemove_argsImpl.Create;
begin
  inherited;
end;

destructor TTodoService.TRemove_argsImpl.Destroy;
begin
  inherited;
end;

function TTodoService.TRemove_argsImpl.GetId: TtodoId;
begin
  Result := FId;
end;

procedure TTodoService.TRemove_argsImpl.SetId( const Value: TtodoId);
begin
  F__isset_Id := True;
  FId := Value;
end;

function TTodoService.TRemove_argsImpl.Get__isset_Id: Boolean;
begin
  Result := F__isset_Id;
end;

procedure TTodoService.TRemove_argsImpl.Read( const iprot: IProtocol);
var
  field_ : TThriftField;
  struc : TThriftStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.String_) then begin
            Self.Id := iprot.ReadString();
          end else begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTodoService.TRemove_argsImpl.Write( const oprot: IProtocol);
var
  struc : TThriftStruct;
  field_ : TThriftField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  Thrift.Protocol.Init( struc, 'remove_args');
  oprot.WriteStructBegin(struc);
  Thrift.Protocol.Init( field_);
  if (__isset_Id) then begin
    field_.Name := 'id';
    field_.Type_  := TType.String_;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    oprot.WriteString(Self.Id);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTodoService.TRemove_argsImpl.ToString: string;
var
  _sb39 : TThriftStringBuilder;
  _first40 : Boolean;
begin
  _sb39 := TThriftStringBuilder.Create('(');
  try
    _first40 := TRUE;
    if (__isset_Id) then begin
      if not _first40 then _sb39.Append(',');
      _first40 := FALSE;
      _sb39.Append('Id: ');
      _sb39.Append( Self.Id);
    end;
    _sb39.Append(')');
    Result := _sb39.ToString;
    if _first40 then {prevent warning};
  finally
    _sb39.Free;
  end;
end;

constructor TTodoService.TRemove_resultImpl.Create;
begin
  inherited;
end;

destructor TTodoService.TRemove_resultImpl.Destroy;
begin
  inherited;
end;

function TTodoService.TRemove_resultImpl.GetError: TTInvalidParameterException.ITInvalidParameterExceptionFactory;
begin
  Result := FError;
end;

procedure TTodoService.TRemove_resultImpl.SetError( const Value: TTInvalidParameterException.ITInvalidParameterExceptionFactory);
begin
  F__isset_Error := True;
  FError := Value;
end;

function TTodoService.TRemove_resultImpl.Get__isset_Error: Boolean;
begin
  Result := F__isset_Error;
end;

procedure TTodoService.TRemove_resultImpl.Read( const iprot: IProtocol);
var
  field_ : TThriftField;
  struc : TThriftStruct;
  tracker : IProtocolRecursionTracker;

begin
  tracker := iprot.NextRecursionLevel;
  struc := iprot.ReadStructBegin;
  try
    while (true) do
    begin
      field_ := iprot.ReadFieldBegin();
      if (field_.Type_ = TType.Stop) then
      begin
        Break;
      end;
      case field_.ID of
        1: begin
          if (field_.Type_ = TType.Struct) then begin
            Self.Error := TTInvalidParameterException.TTInvalidParameterExceptionFactoryImpl.Create;
            Self.Error.Read(iprot);
          end else begin
            TProtocolUtil.Skip(iprot, field_.Type_);
          end;
        end
        else begin
          TProtocolUtil.Skip(iprot, field_.Type_);
        end;
      end;
      iprot.ReadFieldEnd;
    end;
  finally
    iprot.ReadStructEnd;
  end;
end;

procedure TTodoService.TRemove_resultImpl.Write( const oprot: IProtocol);
var
  struc : TThriftStruct;
  field_ : TThriftField;
  tracker : IProtocolRecursionTracker;
begin
  tracker := oprot.NextRecursionLevel;
  Thrift.Protocol.Init( struc, 'remove_result');
  oprot.WriteStructBegin(struc);
  Thrift.Protocol.Init( field_);
  if (Self.Error <> nil) and __isset_Error then begin
    field_.Name := 'error';
    field_.Type_  := TType.Struct;
    field_.ID := 1;
    oprot.WriteFieldBegin(field_);
    Self.Error.Write(oprot);
    oprot.WriteFieldEnd();
  end;
  oprot.WriteFieldStop();
  oprot.WriteStructEnd();
end;

function TTodoService.TRemove_resultImpl.ToString: string;
var
  _sb41 : TThriftStringBuilder;
  _first42 : Boolean;
begin
  _sb41 := TThriftStringBuilder.Create('(');
  try
    _first42 := TRUE;
    if (Self.Error <> nil) and __isset_Error then begin
      if not _first42 then _sb41.Append(',');
      _first42 := FALSE;
      _sb41.Append('Error: ');
      if (Self.Error = nil) then _sb41.Append('<null>') else _sb41.Append( Self.Error.ToString());
    end;
    _sb41.Append(')');
    Result := _sb41.ToString;
    if _first42 then {prevent warning};
  finally
    _sb41.Free;
  end;
end;


initialization

finalization


end.
